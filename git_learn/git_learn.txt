0.基础
   |___设置列表 : git config --list
   |___设置用户名 : git config --global user.name "xxx"
   |___设置邮箱 : git config --global user.email "xxx"
   |___生成SSH KEY : ssh-keygen -t rsa -C "xxx"(你的email) , 会在用户路径.ssh下生成两个文件,id_rsa和id_rsa.pub
   |___id_rsa : 私钥，不能泄露出去
   |___id_rsa.pub : 公钥，可以放心地告诉任何人
1.将某文件夹定义为git仓库
   |___在某文件夹下执行 : git init
   |___目录下会多出.git文件夹
2.添加文件到仓库
   |___git add xxx.xxx(文件) , 可追加 --all
   |___git commit -m "xxx"(提交说明)
3.查看状态
   |___git status : 很重要,可以给你一些提示
4.查看log
   |___查看详细log : git log
   |___查看精简log : git log --pretty=oneline
5.版本
   |___git用HEAD表示当前版本,HEAD^表示上个版本,HEAD^^表示上上版本(上100个版本呢...用HEAD~100)
   |___回退 : git reset --hard HEAD^(回退到上一版本)
   |___恢复 : 回退错了怎么办? git reflog查看执行过的命令,git reset --hard commit_id(回退id)
6.查看改动
   |___git diff xxx.xxx(文件) 查看改动
   |___git diff HEAD -- xxx.xxx(文件) 查看工作区和版本库最新版本区别
7.撤销修改
   |___git checkout -- xxx.xxx(文件) : 如果修改后被放到暂存区,会撤销到版本库一样的状态,如果添加到暂存区了,会撤回到添加到暂存区时的状态
   |___git reset HEAD xxx.xxx(文件) : 把暂存区的修改撤销掉重新放回工作区
8.删除文件
   |___当删除文件后,版本库还是有这个文件,使用 git rm xxx.xxx(文件) + commit(第2条) 来删除版本库中的文件
   |___误删但是版本库还有 : checkout(第7条)
9.分支
   |___创建分支 : git branch xxx(分支名)
   |___切换分支 : git checkout xxx(分支名)
   |___查看分支 : git branch , 前面带*表示当前分支 , 追加参数 -a 可显示所有分支
   |___合并分支 : git merge xxx(分支名), 需先切换到上一级分支,没有的话切换到主分支
   |___删除分支 : git branch -d xxx(分支名) , 未合并的分支会被提示使用-D
   |___查看分支合并图 : git log --graph / git log --graph --pretty=oneline --abbrev-commit
   |___禁用Fast forward : git merge --no-ff -m "xxx"(说明) xxx(分支名)
   |___储藏分支 : git stash , 使用后status将变成干净的
   |___查看储藏列表 : git stash list
   |___恢复储藏 : git stash apply , 恢复但不删除stash , git stash drop 删除stash
   |   	   git stash pop , 恢复的同时删除stash
   |___抓取分支 : 默认情况下其他用户看不到你的分支,其他用户若想在分支上开发就必须创建远程origin的分支到本地,执行 git checkout -b xxx(分支名) origin/xxx(分支名) , 接下来他就可以把分支push到远程(git push origin xxx)
   |   	   当两人push的内容冲突后,可以用git pull 抓取下来,在本地合并后再push ,pull失败的话可能是因为没有指定本地分支与远程分支链接(git branch --set-upstream-to=origin/xxx xxx)
   |___整理分支 : git rebase
10.标签
   |___创建标签 : 在想要打标签的分支执行 git tag xxxx(标签名),默认给最新commit打标签
   |___查看标签 : git tag
   |___给历史commit打标签 : git tag xxx1 xxx2 (xxx1:标签名,xxx2:log oneline id)
   |___查看标签log : git show xxx(标签名)
   |___删除标签 : git tag -d xxx(标签名)
   |___删除远程标签 : 先删本地标签,然后执行 git push origin :refs/tags/xxx(标签名)
   |___推送某标签到远程 : git push origin xxx(标签名)
   |___推送所有标签到远程 : git push origin --tags
11.远程库github
   |___添加SSH Key : 在github上点击Account settings,在SSH Key页,填入公钥,title随便
   |___创建远程仓库 : 在github上点击New repository ,填入Repository name
   |___同步本地仓库到远程库 : 在本地执行 git remote add origin git@github.com:xxx1/xxx2.git xxx1是你的仓库Owner,xxx2是本地仓库名
   |   			然后执行 git push -u origin master
   |   			git push命令，实际上是把当前分支master推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
   |   			接下来只要提交就可以使用 git push origin master 将本地master分支推送至github
   |___clone远程库到本地 : git clone git@github.com:xxx1/xxx2.git xxx1是你的仓库Owner,xxx2是仓库名
   |    		注意第一次clone的时候会提示SSH警告,请确认后输入(yes/no)
   |___参与开源项目 : 在该项目下点fork , 然后从自己账号下clone
